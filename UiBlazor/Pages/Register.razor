@page "/register"
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Authorization;
@inject IAuthService authService
@inject ILocalStorageService _localStorageService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
<PageTitle>Register</PageTitle>
<div class="card">
    <div class="card-body">
        <EditForm Model="registerinfo" OnValidSubmit="registeration">
            <div class="form-group">
                <label>
                    Email:
                </label>
                <InputText @bind-Value="registerinfo.Email" class="form-control"></InputText>

            </div>
            <br/>
            <div class="form-group">
                <label>
                    UserName:
                </label>
                <InputText @bind-Value="registerinfo.UserName" class="form-control"></InputText>

            </div>
            <br />
             <div class="form-group">
                <label>
                    PhoneNumber:
                </label>
                <InputText @bind-Value="registerinfo.PhoneNumber" class="form-control"></InputText>

            </div>
            <br />
            <div class="form-group">
                <label>
                    Password:
                </label>
                <InputText @bind-Value="registerinfo.Password" type="password" class="form-control"></InputText>

            </div>
            <br />
            <div class="form-group">
                <label>
                     Confirm Password:
                </label>
                <InputText @bind-Value="registerinfo.ConfirmPassword" type="password" class="form-control"></InputText>

            </div>
            <br />
            <button type="submit" class="btn btn-primary">Register</button>
        </EditForm>
    </div>
</div>
@code {
    UserRegisterDto registerinfo = new UserRegisterDto();
    async Task registeration()
    {
        var result = await authService.Register(registerinfo);

        if (result.Code == 0 & result.Content!=null)
        {
            var token = result.Content;
            token.IssueDate = DateTime.Now;
            await _localStorageService.SetItemAsync<Share.Model.JwtTokenModel>("accessToken",token );
            await _authenticationStateProvider.GetAuthenticationStateAsync();
            StateHasChanged();
            _navigationManager.NavigateTo("/");

        }
    }
}
